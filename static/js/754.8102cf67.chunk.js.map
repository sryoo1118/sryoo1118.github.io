{"version":3,"file":"static/js/754.8102cf67.chunk.js","mappings":"0KAEA,MAAMA,E,QAAWC,EAAMC,OAAO,CAC5BC,QAAQ,+CAGVH,EAASI,aAAaC,QAAQC,KAC5B,SAAUC,GACR,OAAOA,CACT,IACA,SAAUC,GACR,OAAOC,QAAQC,OAAOF,EACxB,IAGFR,EAASI,aAAaO,SAASL,KAC7B,SAAUK,GACR,OAAOA,CACT,IACA,SAAUH,GACR,OAAOC,QAAQC,OAAOF,EACxB,IAGF,UCtBA,GACEI,YAAWA,IACFC,EAAY,CACjBC,IAAK,gBACLC,OAAQ,QAGZC,aAAYA,IACHH,EAAY,CACjBC,IAAK,gBACLC,OAAQ,QAGZE,eAAcA,IACLJ,EAAY,CACjBC,IAAK,eACLC,OAAQ,S,kCCdd,MA2EA,EA3EsBG,IAAe,IAAd,KAAEC,GAAMD,EAE7B,MAoBME,EAAoBC,GACjBA,EAAOC,WAAWC,QAAQ,wBAAyB,KAG5D,OACEC,EAAAA,EAAAA,IAAA,OAAKC,KAAKA,EAAAA,EAAAA,IAAGC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,kRAQHC,SAAA,EAERC,EAAAA,EAAAA,IAAA,KAAGJ,KAAKA,EAAAA,EAAAA,IAAGK,IAAAA,GAAAH,EAAAA,EAAAA,GAAA,kFAGHC,SACP,8BAGDJ,EAAAA,EAAAA,IAAA,KAAAI,SAAA,EACEC,EAAAA,EAAAA,IAAA,QAAMJ,KAAKA,EAAAA,EAAAA,IAAGM,IAAAA,GAAAJ,EAAAA,EAAAA,GAAA,gOAMFC,SACX,SAGDC,EAAAA,EAAAA,IAAA,QAAMJ,KAAKA,EAAAA,EAAAA,IAAGO,IAAAA,GAAAL,EAAAA,EAAAA,GAAA,uGAGFC,SACX,2BAIHC,EAAAA,EAAAA,IAAA,KAAGJ,KAAKA,EAAAA,EAAAA,IAAGQ,IAAAA,GAAAN,EAAAA,EAAAA,GAAA,uFAGHC,SAELT,EAAKe,QAlEWC,MACrB,IAAIC,EAAQ,EAMZ,OAJAjB,EAAKkB,SAAQC,IACXF,GAASG,SAASD,EAAK,GAAI,GAAG,IAGzBlB,EAAiBgB,EAAM,EA2DVD,MAElBN,EAAAA,EAAAA,IAAA,KAAAD,SAAIT,EAAKe,QA1DgBf,KAC3B,MAAMqB,EAAa,IAAIrB,GAAMsB,MAAK,CAACC,EAAGC,IAAM,IAAIC,KAAKD,EAAE,IAAM,IAAIC,KAAKF,EAAE,MAClEG,EAAiBL,EAAW,GAC5BM,EAAkBP,SAASM,EAAe,GAAI,IAC9CE,EAAiBP,EAAWN,OAAS,EAAIK,SAASC,EAAW,GAAG,GAAI,IAAM,EAGhF,OAAOpB,EAFY0B,EAAkBC,EAEF,EAmDdC,CAAoB7B,OACnC,E,cCvEV,MA4EA,EA5EuBD,IAAe,IAAd,KAAEC,GAAMD,EAE9B,MAqBME,EAAoBC,GACjBA,EAAOC,WAAWC,QAAQ,wBAAyB,KAG5D,OACEC,EAAAA,EAAAA,IAAA,OAAKC,KAAKA,EAAAA,EAAAA,IAAGC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,kRAQHC,SAAA,EAERC,EAAAA,EAAAA,IAAA,KAAGJ,KAAKA,EAAAA,EAAAA,IAAGK,IAAAA,GAAAH,EAAAA,EAAAA,GAAA,kFAGHC,SACP,8BAGDJ,EAAAA,EAAAA,IAAA,KAAAI,SAAA,EACEC,EAAAA,EAAAA,IAAA,QAAMJ,KAAKA,EAAAA,EAAAA,IAAGM,IAAAA,GAAAJ,EAAAA,EAAAA,GAAA,gOAMFC,SACX,SAGDC,EAAAA,EAAAA,IAAA,QAAMJ,KAAKA,EAAAA,EAAAA,IAAGO,IAAAA,GAAAL,EAAAA,EAAAA,GAAA,uGAGFC,SACX,0BAIHC,EAAAA,EAAAA,IAAA,KAAGJ,KAAKA,EAAAA,EAAAA,IAAGQ,IAAAA,GAAAN,EAAAA,EAAAA,GAAA,uFAGHC,SAELT,EAAKe,QAnEYf,KACtB,IAAIiB,EAAQ,EAMZ,OAJAjB,EAAKkB,SAAQC,IACXF,GAASG,SAASD,EAAK,GAAI,GAAG,IAGzBlB,EAAiBgB,EAAM,EA4DVD,CAAehB,MAEjCU,EAAAA,EAAAA,IAAA,KAAAD,SAAIT,EAAKe,QA1DgBf,KAC3B,MAAMqB,EAAa,IAAIrB,GAAMsB,MAAK,CAACC,EAAGC,IAAM,IAAIC,KAAKD,EAAE,IAAM,IAAIC,KAAKF,EAAE,MAClEG,EAAiBL,EAAW,GAC5BM,EAAkBP,SAASM,EAAe,GAAI,IAC9CE,EAAiBP,EAAWN,OAAS,EAAIK,SAASC,EAAW,GAAG,GAAI,IAAM,EAGhF,OAAOpB,EAFY0B,EAAkBC,EAEF,EAmDdC,CAAoB7B,OACnC,E,uFCvEV,MA+CA,EAxCoBD,IAAe,IAAd,KAAEC,GAAMD,EAG3B,MAAMsB,EAAarB,EAAKsB,MAAK,CAACC,EAAGC,IAAM,IAAIC,KAAKF,EAAE,IAAM,IAAIE,KAAKD,EAAE,MAMnE,OACEnB,EAAAA,EAAAA,IAAA,OAAKC,KAAKA,EAAAA,EAAAA,IAAGC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,kRAQHC,SAAA,EAERC,EAAAA,EAAAA,IAAA,KAAGJ,KAAKA,EAAAA,EAAAA,IAAGK,IAAAA,GAAAH,EAAAA,EAAAA,GAAA,kFAGHC,SACP,SAGDJ,EAAAA,EAAAA,IAACyB,EAAAA,EAAa,CAACC,MAAO,IAAKC,OAAQ,IAAKhC,KAAMqB,EAAWZ,SAAA,EACvDC,EAAAA,EAAAA,IAACuB,EAAAA,EAAa,CAACC,gBAAgB,SAC/BxB,EAAAA,EAAAA,IAACyB,EAAAA,EAAK,CAACC,QAASA,CAACC,EAAOC,IAAUA,KAClC5B,EAAAA,EAAAA,IAAC6B,EAAAA,EAAK,CAACC,cAzBQC,GACb,GAANC,OAAUD,EAAO,IAAI,QAyBjB/B,EAAAA,EAAAA,IAACiC,EAAAA,EAAO,KACRjC,EAAAA,EAAAA,IAACkC,EAAAA,EAAM,KACPlC,EAAAA,EAAAA,IAACmC,EAAAA,EAAG,CAACT,QAASC,GAASjB,SAASiB,EAAM,IAAKS,KAAK,UAAUC,KAAK,wBAC/DrC,EAAAA,EAAAA,IAACsC,EAAAA,EAAI,CAACC,KAAK,WAAWb,QAASC,GAASjB,SAASiB,EAAM,IAAKa,OAAO,UAAUH,KAAK,2BAEhF,E,sCC1CV,MAsEA,EAtEoBI,KAElB,MAAOnD,EAAMoD,IAAWC,EAAAA,EAAAA,UAAS,KAEjCC,EAAAA,EAAAA,YAAU,KACRC,GAAa,GACZ,IAEH,MAAMA,EAAcA,KAClBzE,EAAMe,eACL2D,MAAMC,IACmB,OAArBA,EAAIzD,KAAK0D,SACVN,EAAQK,EAAIzD,KAAKA,KAAK2D,KACxB,GACA,EAGEC,EAAc5D,EAAK6D,KAAIxB,IAC3B,MAAO1C,EAAKmE,GAASzB,EAErB,MAAO,EADQ,CAAC,iBAAkB,YAAa,qBAAsB,kBAAkB0B,SAASpE,GAChF,MAAQA,EAAKyB,SAAS0C,GAAO,IAIzCE,EAAeC,OAAOC,OAAON,EAAYO,QAAO,CAACC,EAAGrE,KAAyB,IAAtBsE,EAAUP,GAAM/D,EAG3E,OAFAqE,EAAIC,GAAYD,EAAIC,IAAa,CAAEA,WAAUP,MAAO,GACpDM,EAAIC,GAAUP,OAASA,EAChBM,CAAG,GACT,CAAC,IAEEE,EAAS,CAAC,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,WAEnH,OACEjE,EAAAA,EAAAA,IAAA,OAAKC,KAAKA,EAAAA,EAAAA,IAAGC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,+OAOHC,SAAA,EAERC,EAAAA,EAAAA,IAAA,KAAGJ,KAAKA,EAAAA,EAAAA,IAAGK,IAAAA,GAAAH,EAAAA,EAAAA,GAAA,mHAIHC,SACP,kBAGDJ,EAAAA,EAAAA,IAACkE,EAAAA,EAAQ,CAACxC,MAAO,IAAKC,OAAQ,IAAIvB,SAAA,EAChCC,EAAAA,EAAAA,IAAC8D,EAAAA,EAAG,CACFxE,KAAMgE,EACN5B,QAAQ,QACRqC,GAAI,IACJC,GAAI,IACJC,YAAa,GACb7B,KAAK,UACL8B,MAAQvC,GAAqC,QAA3BA,EAAMwC,QAAQR,SAAqB,MAAQhC,EAAMwC,QAAQR,SAAS5D,SAEnFuD,EAAaH,KAAI,CAACxB,EAAOC,KACxB5B,EAAAA,EAAAA,IAACoE,EAAAA,EAAI,CAAuBhC,KAAMwB,EAAOhC,EAAQgC,EAAOvD,SAAQ,QAAA2B,OAA7CJ,SAGvB5B,EAAAA,EAAAA,IAACiC,EAAAA,EAAO,SAEN,E,oBClEV,MA+LA,EA/LyBoC,KAEvB,MAAO/E,EAAMoD,IAAWC,EAAAA,EAAAA,UAAS,KAEjCC,EAAAA,EAAAA,YAAU,KACRC,GAAa,GACZ,IAEH,MAAMA,EAAcA,KAClBzE,EAAMgB,iBACL0D,MAAMC,IACmB,OAArBA,EAAIzD,KAAK0D,SACVN,EAAQK,EAAIzD,KAAKA,KAAK2D,KACxB,GACA,GAGGqB,EAAiBC,IAAsB5B,EAAAA,EAAAA,UAAS,KAChD6B,EAAcC,IAAmB9B,EAAAA,EAAAA,UAAS,MAE3CO,EAAc5D,EAAKmE,QAAO,CAACC,EAAK/B,KACpC,MAAM+C,EAAc/C,EAAM,IAAM,QAC1BgD,EAAOhD,EAAM,IAAM,QACnBiD,EAASjD,EAAM,IAAM,QACrBkD,EAAQnE,SAASiB,EAAM,GAAI,IAE5B+B,EAAIgB,KACPhB,EAAIgB,GAAe,CAAEnE,MAAO,EAAGuE,OAAQ,KAGzCpB,EAAIgB,GAAanE,OAASsE,EAE1B,MAAME,EAAerB,EAAIgB,GAAaI,OAAOE,MAAMC,GAAMA,EAAE5C,OAASsC,IAEpE,GAAII,EAAc,CAChBA,EAAaxE,OAASsE,EAEtB,MAAMK,EAAiBH,EAAaI,QAAQH,MAAMI,GAAMA,EAAE/C,OAASuC,IAE/DM,EACFA,EAAeL,OAASA,EAExBE,EAAaI,QAAQE,KAAK,CAAEhD,KAAMuC,EAAQC,SAE9C,MACEnB,EAAIgB,GAAaI,OAAOO,KAAK,CAC3BhD,KAAMsC,EACNpE,MAAOsE,EACPM,QAAS,CAAC,CAAE9C,KAAMuC,EAAQC,YAI9B,OAAOnB,CAAG,GACT,CAAC,GAEE4B,EAAY/B,OAAOgC,KAAKrC,GAAaC,KAAKuB,IAAW,CACzDc,IAAKd,EACLe,QAASf,EACTnE,MAAO2C,EAAYwB,GAAanE,MAChCuE,OAAQ5B,EAAYwB,GAAaI,WAG7BY,EAAU,CACd,CACEC,MAAO,UACPC,UAAW,UACXJ,IAAK,UACLK,OAAQA,CAAChF,EAAGC,IAAMD,EAAE4E,QAAQK,cAAchF,EAAE2E,UAE9C,CACEE,MAAO,UACPC,UAAW,QACXJ,IAAK,QACLO,OAASC,GAASzG,EAAiByG,GACnCH,OAAQA,CAAChF,EAAGC,IAAMD,EAAEN,MAAQO,EAAEP,QAuD5B0F,EAAkBA,CAACR,EAASd,KAChCF,EAAgBE,GAChBJ,EAAmB,CAACkB,EAAQD,KAAK,EAG7BjG,EAAoBC,GACjBA,EAAOC,WAAWC,QAAQ,wBAAyB,KAG5D,OACEC,EAAAA,EAAAA,IAAA,OAAKC,KAAKA,EAAAA,EAAAA,IAAGC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,kRAQHC,SAAA,EAERC,EAAAA,EAAAA,IAAA,KAAGJ,KAAKA,EAAAA,EAAAA,IAAGK,IAAAA,GAAAH,EAAAA,EAAAA,GAAA,kFAGHC,SACP,kBAGDJ,EAAAA,EAAAA,IAAA,OAAKC,KAAKA,EAAAA,EAAAA,IAAGM,IAAAA,GAAAJ,EAAAA,EAAAA,GAAA,2BAAsBC,SAAA,EACjCC,EAAAA,EAAAA,IAACkG,EAAAA,EAAK,CACJC,WAAYb,EACZI,QAASA,EACTU,kBAlFmBC,IACzB,MAAMC,EAAc,CAClB,CACEV,UAAW,OACXJ,IAAK,OACLO,OAAQA,CAACC,EAAMO,KACbvG,EAAAA,EAAAA,IAAA,KAAGwG,QAASA,IAAMP,EAAgBI,EAAQE,GAAYxG,SAAEiG,KAG5D,CACEJ,UAAW,QACXJ,IAAK,QACLO,OAASC,GAASzG,EAAiByG,KAIjCS,EAAiBJ,EAAOvB,OAAO3B,KAAKwB,IAAI,CAC5Ca,IAAKb,EAAKtC,QACPsC,MAGL,OACE3E,EAAAA,EAAAA,IAACkG,EAAAA,EAAK,CACJR,QAASY,EACTH,WAAYM,EACZC,YAAY,EACZC,YAAY,EACZP,kBAAoBG,IAClB,MAAMK,EAAgB,CACpB,CACEhB,UAAW,OACXJ,IAAK,QAEP,CACEI,UAAW,QACXJ,IAAK,QACLO,OAASC,GAASzG,EAAiByG,KAIjCa,EAAmBN,EAAWpB,QAAQhC,KAAKyB,IAAM,CACrDY,IAAKZ,EAAOvC,QACTuC,MAGL,OAAO5E,EAAAA,EAAAA,IAACkG,EAAAA,EAAK,CAACR,QAASkB,EAAeT,WAAYU,EAAkBH,YAAY,GAAS,GAE3F,EAoCEI,SAAUA,CAACC,EAAUV,IAAW9B,EAAmBwC,EAAW,CAACV,EAAOb,KAAO,IAC7ElB,gBAAiBA,EACjBoC,YAAY,EACZC,YAAY,IAEbnC,IACCxE,EAAAA,EAAAA,IAACkG,EAAAA,EAAK,CACJR,QAAS,CACP,CACEE,UAAW,OACXJ,IAAK,QAEP,CACEI,UAAW,QACXJ,IAAK,UAGTW,WAAY3B,EAAaW,QAAQhC,KAAKyB,IAAM,CAC1CY,IAAKZ,EAAOvC,QACTuC,MAEL8B,YAAY,SAId,E,MCrLV,MA6CA,EA7CaM,KAEX,MAAOC,EAAcC,IAAmBvE,EAAAA,EAAAA,UAAS,IAE3CwE,EAAS,CACb,CAAEC,EAAG,IAAKC,EAAG,EAAGC,EAAG,EAAGC,EAAG,EAAGC,EAAG,EAAGC,UAAWC,GAC7C,CAAEN,EAAG,IAAKC,EAAG,EAAGC,EAAG,EAAGC,EAAG,EAAGC,EAAG,EAAGC,UAAWE,GAC7C,CAAEP,EAAG,IAAKC,EAAG,EAAGC,EAAG,EAAGC,EAAG,EAAGC,EAAG,GAAIC,UAAWG,GAC9C,CAAER,EAAG,IAAKC,EAAG,EAAGC,EAAG,EAAGC,EAAG,EAAGC,EAAG,GAAIC,UAAWhF,GAC9C,CAAE2E,EAAG,IAAKC,EAAG,EAAGC,EAAG,EAAGC,EAAG,EAAGC,EAAG,GAAIC,UAAWpD,KAGhDzB,EAAAA,EAAAA,YAAU,KACRC,GAAa,GACZ,IAEH,MAAMA,EAAcA,KAClBzE,EAAMW,cACL+D,MAAMC,IACmB,OAArBA,EAAIzD,KAAK0D,SACVkE,EAAgBnE,EAAIzD,KAAKA,KAAK2D,KAChC,GACA,EAGJ,OACEjD,EAAAA,EAAAA,IAAC6H,IAAU,CACTC,UAAU,SACVX,OAAQA,EACRY,KAAM,EACNC,UAAW,GACX3G,MAAO,IACPzB,KAAKA,EAAAA,EAAAA,IAAGC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,oDAENC,SAEDoH,EAAOhE,KAAK1C,IACXT,EAAAA,EAAAA,IAAA,OAAAD,SACGU,EAAKgH,WAAYzH,EAAAA,EAAAA,IAACS,EAAKgH,UAAS,CAACnI,KAAM2H,IAAmB,MADnDxG,EAAK2G,MAIN,C","sources":["apis/utils/index.js","apis/api/api.js","components/ConnectedUser.jsx","components/ConnectedCount.jsx","components/DailyActive.jsx","components/TopReferral.jsx","components/CountryDataTable.jsx","pages/Home.jsx"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n  baseURL:\"https://static.adbrix.io/front/coding-test\",\r\n});\r\n\r\ninstance.interceptors.request.use(\r\n  function (config) {\r\n    return config\r\n  },\r\n  function (error) {\r\n    return Promise.reject(error)\r\n  }\r\n);\r\n\r\ninstance.interceptors.response.use(\r\n  function (response) {\r\n    return response\r\n  },\r\n  function (error) {\r\n    return Promise.reject(error)\r\n  }\r\n);\r\n\r\nexport default instance;","import CommonAxios from \"apis/utils/index\";\r\n\r\nexport default {\r\n  getInfoList () {\r\n    return CommonAxios({\r\n      url: \"/event_1.json\",\r\n      method: \"GET\"\r\n    });\r\n  },\r\n  getChartList () {\r\n    return CommonAxios({\r\n      url: \"/event_3.json\",\r\n      method: \"GET\"\r\n    });\r\n  },\r\n  getCountryList () {\r\n    return CommonAxios({\r\n      url: \"event_4.json\",\r\n      method: \"GET\"\r\n    });\r\n  }\r\n}","/** @jsxImportSource @emotion/react */\r\nimport React from 'react';\r\nimport { css } from \"@emotion/react\";\r\n\r\nconst ConnectedUser = ({ data }) => {\r\n\r\n  const calculateTotal = () => {\r\n    let total = 0;\r\n\r\n    data.forEach(item => {\r\n      total += parseInt(item[1], 10);\r\n    });\r\n\r\n    return numberWithCommas(total);\r\n  };\r\n\r\n  const differenceDateCount = (data) => {\r\n    const sortedData = [...data].sort((a, b) => new Date(b[0]) - new Date(a[0]));\r\n    const latestDateData = sortedData[0];\r\n    const latestDateCount = parseInt(latestDateData[1], 10);\r\n    const yesterdayCount = sortedData.length > 1 ? parseInt(sortedData[1][1], 10) : 0;\r\n    const difference = latestDateCount - yesterdayCount;\r\n    \r\n    return numberWithCommas(difference);\r\n  };\r\n\r\n  const numberWithCommas = (number) => {\r\n    return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\r\n  }\r\n\r\n  return (\r\n    <div css={css`\r\n              display: flex;\r\n              flex-direction: column;\r\n              justify-content: space-between;\r\n              height: 100%;\r\n              padding: 10px 15px;\r\n              background-color: #fff;\r\n              text-align: left;\r\n            `}\r\n    >\r\n      <p css={css`\r\n            color: #66ADE5;\r\n            font-weight: 600;\r\n            `}\r\n      >\r\n        접속유저\r\n      </p>\r\n      <p>\r\n        <span css={css`\r\n                    font-size: 12px;\r\n                    color: #999;\r\n                    background-color: #e6e6e6;\r\n                    padding: 4px;\r\n                    border-radius: 3px;\r\n                  `}\r\n        >\r\n          SUM\r\n        </span>\r\n        <span css={css`\r\n                    color: #999;\r\n                    padding-left: 10px;\r\n                  `}\r\n        >\r\n          Unique Event Count\r\n        </span>\r\n      </p>\r\n      <p css={css`\r\n              font-size: 26px;\r\n              font-weight: 600;\r\n            `}\r\n      >\r\n        {data.length && calculateTotal(data)}\r\n      </p>\r\n      <p>{data.length && differenceDateCount(data)}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ConnectedUser;\r\n","/** @jsxImportSource @emotion/react */\r\nimport React from 'react';\r\nimport { css } from \"@emotion/react\";\r\n\r\nconst ConnectedCount = ({ data }) => {\r\n\r\n  const calculateTotal = (data) => {\r\n    let total = 0;\r\n\r\n    data.forEach(item => {\r\n      total += parseInt(item[2], 10);\r\n    });\r\n\r\n    return numberWithCommas(total);\r\n\r\n  };\r\n\r\n  const differenceDateCount = (data) => {\r\n    const sortedData = [...data].sort((a, b) => new Date(b[0]) - new Date(a[0]));\r\n    const latestDateData = sortedData[0];\r\n    const latestDateCount = parseInt(latestDateData[2], 10);\r\n    const yesterdayCount = sortedData.length > 1 ? parseInt(sortedData[2][2], 10) : 0;\r\n    const difference = latestDateCount - yesterdayCount;\r\n    \r\n    return numberWithCommas(difference);\r\n  };\r\n\r\n  const numberWithCommas = (number) => {\r\n    return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\r\n  }\r\n\r\n  return (\r\n    <div css={css`\r\n              display: flex;\r\n              flex-direction: column;\r\n              justify-content: space-between;\r\n              height: 100%;\r\n              padding: 10px 15px;\r\n              background-color: #fff;\r\n              text-align: left;\r\n            `}\r\n    >\r\n      <p css={css`\r\n            color: #66ADE5;\r\n            font-weight: 600;\r\n            `}\r\n      >\r\n        접속횟수\r\n      </p>\r\n      <p>\r\n        <span css={css`\r\n                    font-size: 12px;\r\n                    color: #999;\r\n                    background-color: #e6e6e6;\r\n                    padding: 4px;\r\n                    border-radius: 3px;\r\n                  `}\r\n        >\r\n          SUM\r\n        </span>\r\n        <span css={css`\r\n                    color: #999;\r\n                    padding-left: 10px;\r\n                  `}\r\n        >\r\n          Total Event Count\r\n        </span>\r\n      </p>\r\n      <p css={css`\r\n              font-size: 26px;\r\n              font-weight: 600;\r\n            `}\r\n      >\r\n        {data.length && calculateTotal(data)}\r\n      </p>\r\n      <p>{data.length && differenceDateCount(data)}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ConnectedCount;\r\n","/** @jsxImportSource @emotion/react */\r\nimport React from 'react';\r\nimport { ComposedChart, Bar, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts';\r\nimport { css } from \"@emotion/react\";\r\n\r\nconst chartData = [\r\n  { name: 'A', value: 30, lineValue: 70 },\r\n  { name: 'B', value: 45, lineValue: 50 },\r\n  { name: 'C', value: 20, lineValue: 80 },\r\n  // ... 추가 데이터\r\n];\r\n\r\nconst DailyActive = ({ data }) => {\r\n\r\n  // 날짜를 기준으로 정렬\r\n  const sortedData = data.sort((a, b) => new Date(a[0]) - new Date(b[0]));\r\n\r\n  const formatYAxis = (tick) => {\r\n    return `${tick / 1000}k`;\r\n  };\r\n\r\n  return (\r\n    <div css={css`\r\n              display: flex;\r\n              flex-direction: column;\r\n              justify-content: space-between;\r\n              height: 100%;\r\n              padding: 10px 15px;\r\n              background-color: #fff;\r\n              text-align: left;\r\n            `}\r\n    >\r\n      <p css={css`\r\n            color: #66ADE5;\r\n            font-weight: 600;\r\n            `}\r\n      >\r\n        DAU\r\n      </p>\r\n      <ComposedChart width={800} height={400} data={sortedData}>\r\n        <CartesianGrid strokeDasharray=\"3 3\" />\r\n        <XAxis dataKey={(entry, index) => index} />\r\n        <YAxis tickFormatter={formatYAxis} />\r\n        <Tooltip />\r\n        <Legend />\r\n        <Bar dataKey={entry => parseInt(entry[1])} fill=\"#8884d8\" name=\"Unique Event Count\" />\r\n        <Line type=\"monotone\" dataKey={entry => parseInt(entry[2])} stroke=\"#82ca9d\" name=\"Total Event Count\" />\r\n      </ComposedChart>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DailyActive;\r\n","/** @jsxImportSource @emotion/react */\r\nimport React, { useState, useEffect } from 'react';\r\nimport { PieChart, Pie, Tooltip, Cell, Legend } from 'recharts';\r\nimport axios from \"apis/api/api\";\r\nimport { css } from \"@emotion/react\";\r\n\r\nconst TopReferral = () => {\r\n\r\n  const [data, setData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    getInfoData();\r\n  }, []);\r\n\r\n  const getInfoData = () => {\r\n    axios.getChartList()\r\n    .then((res) => {\r\n      if(res.data.message === \"ok\") {\r\n        setData(res.data.data.rows);\r\n      }\r\n    });\r\n  };\r\n\r\n  const groupedData = data.map(entry => {\r\n    const [url, value] = entry;\r\n    const isEtc = ![\"www.google.com\", \"adbrix.io\", \"console.dfinery.io\", \"www.dfinery.io\"].includes(url);\r\n    return [isEtc ? \"etc\" : url, parseInt(value)];\r\n  });\r\n  \r\n  // Combine data for the same category\r\n  const combinedData = Object.values(groupedData.reduce((acc, [category, value]) => {\r\n    acc[category] = acc[category] || { category, value: 0 };\r\n    acc[category].value += value;\r\n    return acc;\r\n  }, {}));\r\n\r\n  const COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#AF19FF', '#4D4D4D', '#FF7F7F', '#7FBFFF', '#4DFFE0', '#FFD700'];\r\n\r\n  return (\r\n    <div css={css`\r\n              display: flex;\r\n              flex-direction: column;\r\n              justify-content: space-between;\r\n              height: 100%;\r\n              background-color: #fff;\r\n              text-align: left;\r\n            `}\r\n    >\r\n      <p css={css`\r\n            color: #66ADE5;\r\n            font-weight: 600;\r\n            padding: 10px 15px;\r\n            `}\r\n      >\r\n        Top Referral\r\n      </p>\r\n      <PieChart width={400} height={400}>\r\n        <Pie\r\n          data={combinedData}\r\n          dataKey=\"value\"\r\n          cx={170}\r\n          cy={150}\r\n          outerRadius={80}\r\n          fill=\"#8884d8\"\r\n          label={(entry) => entry.payload.category === 'etc' ? 'etc' : entry.payload.category}\r\n        >\r\n          {combinedData.map((entry, index) => (\r\n            <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\r\n          ))}\r\n        </Pie>\r\n        <Tooltip />\r\n      </PieChart>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TopReferral;\r\n","/** @jsxImportSource @emotion/react */\r\nimport React, { useState, useEffect } from \"react\";\r\nimport axios from \"apis/api/api\";\r\nimport { Table } from \"antd\";\r\nimport { css } from \"@emotion/react\";\r\n\r\nconst CountryDataTable = () => {\r\n\r\n  const [data, setData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    getInfoData();\r\n  }, []);\r\n\r\n  const getInfoData = () => {\r\n    axios.getCountryList()\r\n    .then((res) => {\r\n      if(res.data.message === \"ok\") {\r\n        setData(res.data.data.rows);\r\n      }\r\n    });\r\n  };\r\n\r\n  const [expandedRowKeys, setExpandedRowKeys] = useState([]);\r\n  const [selectedCity, setSelectedCity] = useState(null);\r\n\r\n  const groupedData = data.reduce((acc, entry) => {\r\n    const countryCode = entry[0] || \"empty\";\r\n    const city = entry[1] || \"empty\";\r\n    const region = entry[2] || \"empty\";\r\n    const count = parseInt(entry[3], 10);\r\n\r\n    if (!acc[countryCode]) {\r\n      acc[countryCode] = { total: 0, cities: [] };\r\n    }\r\n\r\n    acc[countryCode].total += count;\r\n\r\n    const existingCity = acc[countryCode].cities.find((c) => c.name === city);\r\n\r\n    if (existingCity) {\r\n      existingCity.total += count;\r\n\r\n      const existingRegion = existingCity.regions.find((r) => r.name === region);\r\n\r\n      if (existingRegion) {\r\n        existingRegion.count += count;\r\n      } else {\r\n        existingCity.regions.push({ name: region, count });\r\n      }\r\n    } else {\r\n      acc[countryCode].cities.push({\r\n        name: city,\r\n        total: count,\r\n        regions: [{ name: region, count }],\r\n      });\r\n    }\r\n\r\n    return acc;\r\n  }, {});\r\n\r\n  const tableData = Object.keys(groupedData).map((countryCode) => ({\r\n    key: countryCode,\r\n    country: countryCode,\r\n    total: groupedData[countryCode].total,\r\n    cities: groupedData[countryCode].cities,\r\n  }));\r\n\r\n  const columns = [\r\n    {\r\n      title: \"GroupBy\",\r\n      dataIndex: \"country\",\r\n      key: \"country\",\r\n      sorter: (a, b) => a.country.localeCompare(b.country),\r\n    },\r\n    {\r\n      title: \"Metrics\",\r\n      dataIndex: \"total\",\r\n      key: \"total\",\r\n      render: (text) => numberWithCommas(text),\r\n      sorter: (a, b) => a.total - b.total,\r\n    },\r\n  ];\r\n\r\n  const expandedRowRender = (record) => {\r\n    const cityColumns = [\r\n      {\r\n        dataIndex: \"name\",\r\n        key: \"name\",\r\n        render: (text, cityRecord) => (\r\n          <a onClick={() => handleCityClick(record, cityRecord)}>{text}</a>\r\n        ),\r\n      },\r\n      {\r\n        dataIndex: \"total\",\r\n        key: \"total\",\r\n        render: (text) => numberWithCommas(text),\r\n      },\r\n    ];\r\n\r\n    const cityDataSource = record.cities.map((city) => ({\r\n      key: city.name,\r\n      ...city,\r\n    }));\r\n\r\n    return (\r\n      <Table\r\n        columns={cityColumns}\r\n        dataSource={cityDataSource}\r\n        pagination={false}\r\n        showHeader={true}\r\n        expandedRowRender={(cityRecord) => {\r\n          const regionColumns = [\r\n            {\r\n              dataIndex: \"name\",\r\n              key: \"name\",\r\n            },\r\n            {\r\n              dataIndex: \"count\",\r\n              key: \"count\",\r\n              render: (text) => numberWithCommas(text),\r\n            },\r\n          ];\r\n\r\n          const regionDataSource = cityRecord.regions.map((region) => ({\r\n            key: region.name,\r\n            ...region,\r\n          }));\r\n\r\n          return <Table columns={regionColumns} dataSource={regionDataSource} pagination={false} />;\r\n        }}\r\n      />\r\n    );\r\n  };\r\n\r\n  const handleCityClick = (country, city) => {\r\n    setSelectedCity(city);\r\n    setExpandedRowKeys([country.key]);\r\n  };\r\n\r\n  const numberWithCommas = (number) => {\r\n    return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\r\n  }\r\n\r\n  return (\r\n    <div css={css`\r\n              display: flex;\r\n              flex-direction: column;\r\n              justify-content: space-between;\r\n              height: 100%;\r\n              padding: 10px 15px;\r\n              background-color: #fff;\r\n              text-align: left;\r\n            `}\r\n    >\r\n      <p css={css`\r\n            color: #66ADE5;\r\n            font-weight: 600;\r\n            `}\r\n      >\r\n        Top Referral\r\n      </p>\r\n      <div css={css`overflow-y: scroll;`}>\r\n        <Table\r\n          dataSource={tableData}\r\n          columns={columns}\r\n          expandedRowRender={expandedRowRender}\r\n          onExpand={(expanded, record) => setExpandedRowKeys(expanded ? [record.key] : [])}\r\n          expandedRowKeys={expandedRowKeys}\r\n          pagination={false}\r\n          showHeader={true}\r\n        />\r\n        {selectedCity && (\r\n          <Table\r\n            columns={[\r\n              {\r\n                dataIndex: \"name\",\r\n                key: \"name\",\r\n              },\r\n              {\r\n                dataIndex: \"count\",\r\n                key: \"count\",\r\n              },\r\n            ]}\r\n            dataSource={selectedCity.regions.map((region) => ({\r\n              key: region.name,\r\n              ...region,\r\n            }))}\r\n            pagination={false}\r\n          />\r\n        )}\r\n      </div>\r\n    </div>\r\n    \r\n  );\r\n};\r\n\r\nexport default CountryDataTable;\r\n","/** @jsxImportSource @emotion/react */\r\nimport React, { useState, useEffect } from 'react';\r\nimport GridLayout from 'react-grid-layout';\r\nimport axios from \"apis/api/api\";\r\nimport ConnectedUser from 'components/ConnectedUser';\r\nimport ConnectedCount from 'components/ConnectedCount';\r\nimport DailyActive from 'components/DailyActive';\r\nimport TopReferral from 'components/TopReferral';\r\nimport CountryDataTable from 'components/CountryDataTable';\r\nimport { css } from \"@emotion/react\";\r\n\r\nconst Home = () => {\r\n\r\n  const [responseData, setResponseData] = useState([]);\r\n  \r\n  const layout = [\r\n    { i: 'a', x: 0, y: 0, w: 2, h: 5, component: ConnectedUser },\r\n    { i: 'b', x: 2, y: 0, w: 2, h: 5, component: ConnectedCount },\r\n    { i: 'c', x: 0, y: 1, w: 6, h: 12, component: DailyActive },\r\n    { i: 'd', x: 0, y: 2, w: 2, h: 10, component: TopReferral },\r\n    { i: 'e', x: 2, y: 2, w: 2, h: 10, component: CountryDataTable }\r\n  ];\r\n\r\n  useEffect(() => {\r\n    getInfoData();\r\n  }, []);\r\n\r\n  const getInfoData = () => {\r\n    axios.getInfoList()\r\n    .then((res) => {\r\n      if(res.data.message === \"ok\") {\r\n        setResponseData(res.data.data.rows);\r\n      }\r\n    });\r\n  };\r\n\r\n  return (\r\n    <GridLayout \r\n      className=\"layout\" \r\n      layout={layout} \r\n      cols={5} \r\n      rowHeight={30} \r\n      width={1000}\r\n      css={css`\r\n        background-color: #d9d9d9;\r\n      `}\r\n    >\r\n      {layout.map((item) => (\r\n        <div key={item.i}>\r\n          {item.component ? <item.component data={responseData} /> : null}\r\n        </div>\r\n      ))}\r\n    </GridLayout>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n"],"names":["instance","axios","create","baseURL","interceptors","request","use","config","error","Promise","reject","response","getInfoList","CommonAxios","url","method","getChartList","getCountryList","_ref","data","numberWithCommas","number","toString","replace","_jsxs","css","_templateObject","_taggedTemplateLiteral","children","_jsx","_templateObject2","_templateObject3","_templateObject4","_templateObject5","length","calculateTotal","total","forEach","item","parseInt","sortedData","sort","a","b","Date","latestDateData","latestDateCount","yesterdayCount","differenceDateCount","ComposedChart","width","height","CartesianGrid","strokeDasharray","XAxis","dataKey","entry","index","YAxis","tickFormatter","tick","concat","Tooltip","Legend","Bar","fill","name","Line","type","stroke","TopReferral","setData","useState","useEffect","getInfoData","then","res","message","rows","groupedData","map","value","includes","combinedData","Object","values","reduce","acc","category","COLORS","PieChart","Pie","cx","cy","outerRadius","label","payload","Cell","CountryDataTable","expandedRowKeys","setExpandedRowKeys","selectedCity","setSelectedCity","countryCode","city","region","count","cities","existingCity","find","c","existingRegion","regions","r","push","tableData","keys","key","country","columns","title","dataIndex","sorter","localeCompare","render","text","handleCityClick","Table","dataSource","expandedRowRender","record","cityColumns","cityRecord","onClick","cityDataSource","pagination","showHeader","regionColumns","regionDataSource","onExpand","expanded","Home","responseData","setResponseData","layout","i","x","y","w","h","component","ConnectedUser","ConnectedCount","DailyActive","GridLayout","className","cols","rowHeight"],"sourceRoot":""}